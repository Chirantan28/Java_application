server:
  port: 8080

application:
  name: spring-boot-multi-api
  description: A sample Spring Boot application with REST, gRPC, and GraphQL APIs.
  version: 0.0.1
  spring:
    datasource:
      url: jdbc:h2:mem:testdb
      driver-class-name: org.h2.Driver
      username: sa
      password:
    h2:
      console:
        enabled: true
    jpa:
      hibernate:
        ddl-auto: update
      show-sql: true
    
    graphql:
      servlet:
        mapping: /graphql
        enabled: true
      graphiql:
        enabled: true
      path: /graphql
      schema:
        locations: classpath:graphql/
        printer:
          enabled: true
    openTelemetry:
      enabled: true
      endpoint: http://otel-collector:4317
      http-endpoint: http://otel-collector:4318

spring:
  jackson:
    time-zone: UTC

logging:
  level:
    root: INFO
    com.example.demo: DEBUG
    io.opentelemetry: DEBUG
    org.springframework.web: DEBUG
    com.splunk.logging: DEBUG  # Enable debug logging for Splunk
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
 
  # Splunk Configuration
  splunk:
    url: http://localhost:8088
    token: 8357121e-7e1b-4000-aa1d-f3b482531210
    source: spring-boot-multi-api
    index: main
    batch-size: 100
    batch-interval: 1000
    timeout: 30000
    retries: 5
    retry-interval: 1000

otel:
  traces:
    exporter: otlp
    endpoint: http://otel-collector:4317
    http-endpoint: http://otel-collector:4317
  metrics:
    exporter: otlp
    endpoint: http://otel-collector:4317
    http-endpoint: http://otel-collector:4317
  logs:
    exporter: otlp
  exporter:
    otlp:
      endpoint: http://otel-collector:4317

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true

